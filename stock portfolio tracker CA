import tkinter as tk
from tkinter import messagebox

# Initialize the portfolio dictionary
portfolio = {}

# Function to add a stock to the portfolio
def add_stock():
    try:
        symbol = symbol_entry.get().upper()
        quantity = int(quantity_entry.get())
        purchase_price = float(price_entry.get())
        
        if symbol in portfolio:
            portfolio[symbol]['quantity'] += quantity
        else:
            portfolio[symbol] = {'quantity': quantity, 'purchase_price': purchase_price}
        
        messagebox.showinfo("Success", f"Added {quantity} shares of {symbol} to the portfolio.")
        clear_entries()
    except ValueError:
        messagebox.showerror("Error", "Please enter valid values for stock symbol, quantity, and purchase price.")

# Function to remove a stock from the portfolio
def remove_stock():
    try:
        symbol = symbol_entry.get().upper()
        quantity = int(quantity_entry.get())
        
        if symbol in portfolio and portfolio[symbol]['quantity'] >= quantity:
            portfolio[symbol]['quantity'] -= quantity
            if portfolio[symbol]['quantity'] == 0:
                del portfolio[symbol]
            messagebox.showinfo("Success", f"Removed {quantity} shares of {symbol} from the portfolio.")
        else:
            messagebox.showerror("Error", f"Invalid stock symbol or quantity.")
        clear_entries()
    except ValueError:
        messagebox.showerror("Error", "Please enter valid values for stock symbol and quantity.")

# Function to clear the input fields
def clear_entries():
    symbol_entry.delete(0, tk.END)
    quantity_entry.delete(0, tk.END)
    price_entry.delete(0, tk.END)
    current_price_entry.delete(0, tk.END)

# Function to display the portfolio and its performance
def display_portfolio():
    portfolio_window = tk.Toplevel()
    portfolio_window.title("Your Portfolio")

    text_area = tk.Text(portfolio_window, height=20, width=60)
    text_area.pack()
    
    total_investment = 0
    total_value = 0

    for symbol, info in portfolio.items():
        quantity = info['quantity']
        purchase_price = info['purchase_price']
        current_price = float(info['current_price'])
        
        stock_value = quantity * current_price
        total_value += stock_value
        investment = quantity * purchase_price
        total_investment += investment
        performance = ((current_price - purchase_price) / purchase_price) * 100
        
        text_area.insert(tk.END, f"{symbol}: {quantity} shares | Purchase: ${purchase_price:.2f} | "
                                 f"Current: ${current_price:.2f} | Performance: {performance:.2f}%\n")
    
    if total_investment > 0:
        total_performance = ((total_value - total_investment) / total_investment) * 100
    else:
        total_performance = 0
    
    text_area.insert(tk.END, f"\nTotal Investment: ${total_investment:.2f}")
    text_area.insert(tk.END, f"\nTotal Value: ${total_value:.2f}")
    text_area.insert(tk.END, f"\nOverall Performance: {total_performance:.2f}%")
    text_area.config(state='disabled')

# Function to update the current price of a stock
def update_current_price():
    try:
        symbol = symbol_entry.get().upper()
        current_price = float(current_price_entry.get())
        
        if symbol in portfolio:
            portfolio[symbol]['current_price'] = current_price
            messagebox.showinfo("Success", f"Updated current price of {symbol} to ${current_price:.2f}.")
        else:
            messagebox.showerror("Error", f"Stock {symbol} not found in the portfolio.")
        clear_entries()
    except ValueError:
        messagebox.showerror("Error", "Please enter valid values for stock symbol and current price.")

# Main Tkinter window
root = tk.Tk()
root.title("Stock Portfolio Tracker")

# Labels and Entries for Stock Symbol, Quantity, Purchase Price, and Current Price
tk.Label(root, text="Stock Symbol:").grid(row=0, column=0, padx=10, pady=10)
symbol_entry = tk.Entry(root)
symbol_entry.grid(row=0, column=1, padx=10, pady=10)

tk.Label(root, text="Quantity:").grid(row=1, column=0, padx=10, pady=10)
quantity_entry = tk.Entry(root)
quantity_entry.grid(row=1, column=1, padx=10, pady=10)

tk.Label(root, text="Purchase Price:").grid(row=2, column=0, padx=10, pady=10)
price_entry = tk.Entry(root)
price_entry.grid(row=2, column=1, padx=10, pady=10)

tk.Label(root, text="Current Price:").grid(row=3, column=0, padx=10, pady=10)
current_price_entry = tk.Entry(root)
current_price_entry.grid(row=3, column=1, padx=10, pady=10)

# Buttons for Adding, Removing, Updating, and Displaying Portfolio
add_button = tk.Button(root, text="Add Stock", command=add_stock)
add_button.grid(row=4, column=0, padx=10, pady=10)

remove_button = tk.Button(root, text="Remove Stock", command=remove_stock)
remove_button.grid(row=4, column=1, padx=10, pady=10)

update_price_button = tk.Button(root, text="Update Current Price", command=update_current_price)
update_price_button.grid(row=5, column=0, columnspan=2, padx=10, pady=10)

portfolio_button = tk.Button(root, text="View Portfolio", command=display_portfolio)
portfolio_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10)

# Run the Tkinter event loop
root.mainloop()